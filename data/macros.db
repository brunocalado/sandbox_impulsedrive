{"_id":"ky6vIUp6sLRCxjqf","name":"Escudos","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"8m8ua3an3okqKvoB":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let params =\n[{\n    filterType: \"field\",\n    filterId: \"myHexaField\",\n    shieldType: 2,\n    gridPadding: 2,\n    color: 0x2200a8,\n    time: 0,\n    blend: 2,\n    intensity: 1,\n    lightAlpha: 0,\n    lightSize: 0,\n    scale: 2,\n    radius: 0.70,\n    chromatic: false,\n    discardThreshold: 0.13,\n    alphaDiscard: true,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: 0.0015, \n        animType: \"move\" \n      }\n    }\n},\n{\n    filterType: \"xglow\",\n    filterId: \"myBurningAura\",\n    auraType: 2,\n    color: 0x500050,\n    scale: 1.,\n    time: 0,\n    auraIntensity: 1,\n    subAuraIntensity: 0,\n    threshold: 0,\n    discard: false,\n    zOrder: 3000,\n    animated:\n    {\n        time : \n        {  \n           active: true,\n           speed: 0.0027, \n           animType: \"move\" \n        },\n        thickness:\n        {\n           active: true,\n           loopDuration: 6000, \n           animType: \"cosOscillation\", \n           val1:2, \n           val2:4\n        }\n    }\n}];\n\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"8m8ua3an3okqKvoB","img":"icons/equipment/shield/heater-steel-grey.webp","actorIds":[]}
{"_id":"vqf3yH5mlkGlOMWM","name":"Gerar MissÃ£o","permission":{"default":0,"8m8ua3an3okqKvoB":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"const macroVersion = 'v0.1';\n/* Mission Generator\nFeatures\n- \n\nsource: \nicon: \n*/\n\n(async () => { \n\n  let missionTypes = ['Random', 'The Milk Run', 'The Heist', 'The Assault', 'The Defense', 'The Salvage', 'The Investigation'];\n  let missionList;    \n\n  missionTypes.map((el) => {      \n    if (el==='Random') {\n      missionList += `<option value=\"${el}\" selected>${el}</option>`;\n    } else {\n      missionList += `<option value=\"${el}\">${el}</option>`;      \n    }    \n  });  \n  \n  let template = `\n  <style>  \n  #dungeonworldmacrocss header {\n    background: #060f52;\n    border-radius: 0;    \n    border: none;    \n    margin-bottom: 2px;\n    font-size: .75rem;\n  }\n  #dungeonworldmacrocss form {\n    margin-bottom: 30px;   \n  }\n  #dungeonworldmacrocss .window-content {    \n       \n  }  \n  #dungeonworldmacrocss .form-fields.buttons {\n    justify-content: flex-start !important;\n  }\n  #dungeonworldmacrocss .button {\n    height: 35px;\n    box-shadow: inset 0 0 0 1px #1111FF,inset 0 0 0 1.5px var(--tertiary),inset 0 0 0 1px #1111FF;\n    font-size: 12px;\n    padding: 0;\n    background: #eb34b7;\n    color: white;\n    cursor: pointer;\n  }\n  #dungeonworldmacrocss .button:hover {\n    box-shadow: 0 0 4px red;\n  }\n  #dungeonworldmacrocss .meuitem input[type=\"radio\"] {\n    opacity: 0;\n    position: fixed;\n    width: 0;  \n  }\n  #dungeonworldmacrocss .minhalista {    \n    display: inline-block;\n    list-style-type: none; \n    text-align: left; \n    margin: 0; \n    padding: 0; \n    width: 100%;\n  }\n  #dungeonworldmacrocss .meuitem {    \n    display: inline-block;    \n    padding: 2px; \n  }  \n  #dungeonworldmacrocss .meuitem label {    \n    cursor: pointer;    \n    margin: 0px 3px ;\n    \n    height: 100%;\n    width: 100%;\n    border-radius: 3px;\n    font-size: 16px;\n    font-family: \"Signika\", sans-serif;  \n    background: #060f52;        \n    color: white;    \n  }\n  \n  #dungeonworldmacrocss .checkbox label i {\n    margin-right: 5px;\n    color: white;\n    background: #6d729c;\n  }\n  #dungeonworldmacrocss .meuitem label:hover {\n    box-shadow: 0 0 14px black;\n  }\n  #dungeonworldmacrocss .meuitem input[type=\"checkbox\"]:selected + label {\n    background: rgba(0, 0, 150, 0.7);\n  }\n  #dungeonworldmacrocss .dialog-button {\n    height: 50px;\n    background: #060f52;\n    color: white;\n    justify-content: space-evenly;\n    align-items: center;\n    cursor: pointer;\n  }    \n  </style>  \n  \n  <h2>Mission Type</h2>\n    <div class=\"form-fields\">\n\n    <ul class=\"minhalista\">\n      <select id=\"missionSelected\" style=\"width: 200px\">${missionList}</select>\n    </ul>\n  </div>\n  \n  </br>\n  `;\n  \n  new Dialog({\n    title: `Mission Generator - ${macroVersion}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Roll\",\n        callback: async (html) => {\n          missionRoller(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n    default: \"ok\"    \n  }, { id: 'dungeonworldmacrocss'}).render(true);\n})()\n\n// MAIN =============================\nasync function missionRoller(html){\n  let mission = html.find(\"#missionSelected\")[0].value;\n  \n  enviarChat(mission);\n}\n\n\n/* Functions */\nasync function enviarChat(mission) {     \n  if (mission=='Random') {\n    const missionRandom = ['The Milk Run', 'The Heist', 'The Assault', 'The Defense', 'The Salvage', 'The Investigation'];    \n    mission = missionRandom[Math.floor(Math.random() * missionRandom.length)];    \n  }\n  let message = `<h2>Mission: <b style=\"color: red\">${mission}</b></h2>`;  \n  let messageNoHook;\n  \n  if (mission=='The Milk Run') {    \n    message+=`<p>Safe -2, Clock 3, 0-1 Complications.</p>`;\n    let part1 = await drawFromTable(mission + ' - ' + 'Cargo Passengers');\n    let part2 = await drawFromTable(mission + ' - ' + 'Location');\n    let part4 = await drawFromTable(mission + ' - ' + 'Location');\n    let part3 = await drawFromTable(mission + ' - ' + 'Complications');\n    message+= `<p>Pick up (<b style=\"color: red\">${part1}</b>) from (<b style=\"color: red\">${part2}</b>), and deliver it to (<b style=\"color: red\">${part4}</b>).</p>`;\n    message+=`<p>Complications: <b style=\"color: red\">${part3}</b></p>`;\n  } else if (mission=='The Heist') {    \n    message+=`<p>Risky -1, Clock 3, 0-1 Complications.</p>`;\n    let part1 = await drawFromTable(mission + ' - ' + 'Location');\n    let part2 = await drawFromTable(mission + ' - ' + 'Interact with');    \n    let part3 = await drawFromTable(mission + ' - ' + 'Target');\n    let part4 = await drawFromTable(mission + ' - ' + 'Complications');\n    message+= `<p>Infiltrate (<b style=\"color: red\">${part1}</b>) and (<b style=\"color: red\">${part2}</b>) (<b style=\"color: red\">${part3}</b>).</p>`;\n    message+=`<p>Complications: <b style=\"color: red\">${part4}</b></p>`;\n  } else if (mission=='The Assault') {    \n    message+=`<p>Deadly +1, Clock 3, 0-1 Complications.</p>`;\n    let part1 = await drawFromTable(mission + ' - ' + 'Target');\n    let part2 = await drawFromTable(mission + ' - ' + 'Intent');        \n    let part3 = await drawFromTable(mission + ' - ' + 'Complication');\n    message+= `<p>Assault (<b style=\"color: red\">${part1}</b>) to (<b style=\"color: red\">${part2}</b>).</p>`;\n    message+=`<p>Complications: <b style=\"color: red\">${part3}</b></p>`;\n  } else if (mission=='The Defense') {    \n    message+=`<p>Dangerous 0, Clock 4, 0-1 Complications.</p>`;\n    let part1 = await drawFromTable(mission + ' - ' + 'Target');\n    let part2 = await drawFromTable(mission + ' - ' + 'Threat');        \n    let part3 = await drawFromTable(mission + ' - ' + 'Complication');\n    message+= `<p>Protect (<b style=\"color: red\">${part1}</b>) from (<b style=\"color: red\">${part2}</b>).</p>`;\n    message+=`<p>Complications: <b style=\"color: red\">${part3}</b></p>`;\n  } else if (mission=='The Salvage') {    \n    message+=`<p>Risky -1, Clock 4, 0-1 Complications.</p>`;\n    let part1 = await drawFromTable(mission + ' - ' + 'Salvage');\n    let part2 = await drawFromTable(mission + ' - ' + 'Location');        \n    let part3 = await drawFromTable(mission + ' - ' + 'Complications');\n    message+= `<p>Go to (<b style=\"color: red\">${part1}</b>) and search for (<b style=\"color: red\">${part2}</b>).</p>`;\n    message+=`<p>Complications: <b style=\"color: red\">${part3}</b></p>`;\n  } else if (mission=='The Investigation') {    \n    message+=`<p>Risky -1, Clock 5, 1-2 Complications.</p>`;\n    let part1 = await drawFromTable(mission + ' - ' + 'Crime');\n    let part2 = await drawFromTable(mission + ' - ' + 'Mystery');        \n    let part3 = await drawFromTable(mission + ' - ' + 'Complication');\n    message+= `<p>Investigate and resolve Crime: (<b style=\"color: red\">${part1}</b>) or Mystery: (<b style=\"color: red\">${part2}</b>).</p>`;\n    message+=`<p>Complications: <b style=\"color: red\">${part3}</b></p>`;\n  }\n\n  messageNoHook = message;\n  addEventListenerOnHtmlElement(\"#createJournal\", 'click', (e) => {    \n    createMissionJournal(mission, messageNoHook);      \n  });          \n  message+=`<button style=\"background:#d10000;color:white\" id=\"createJournal\">Create Journal</button>`;\n\n  let chatData = {\n    user: game.user._id,    \n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\n/* Functions */\nasync function drawFromTable(tableName) {\n\n  let list_compendium = await game.packs.filter(p=>p.entity=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label=='Contract' )[0].getContent();      \n  const table = await inside.filter( p=>p._data['name']==tableName )[0];          \n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  return await table.roll().results[0].text;  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createMissionJournal(mission, message) {\n  \n  let myjournal = await JournalEntry.create({   \n    name: mission,  \n    content: message    \n  });\n  await myjournal.sheet.render(true);\n  \n}","author":"8m8ua3an3okqKvoB","img":"icons/sundries/gaming/dice-runed-tan.webp","actorIds":[]}
{"_id":"wrQgfhts4jXruZW4","name":"Limpar Efeitos","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"8m8ua3an3okqKvoB":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\nTokenMagic.deleteFiltersOnSelected();","author":"8m8ua3an3okqKvoB","img":"icons/svg/dice-target.svg","actorIds":[]}
